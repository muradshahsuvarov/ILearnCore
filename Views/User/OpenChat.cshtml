@using ILearnCoreV19.Data;
@using ILearnCoreV19.Areas.Identity.Data;

@model List<ILearnCoreV19.Areas.Identity.Data.ApplicationMessage>

@{
    ViewData["Title"] = "Chat";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var userName = User.Identity.Name;
    String selectedUser = String.Empty;
}


<html>
<head>

    <link href="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
    <script src="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <!------ Include the above in your HEAD tag ---------->

    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css" type="text/css" rel="stylesheet"

</head>
<body>
    <div class="container">
        <div class="messaging">
            <div class="inbox_msg">
                <div class="inbox_people">
                    <div class="headind_srch">
                        <div class="recent_heading">
                            <h4>Recent</h4>
                        </div>
                        <div style="position:relative; left:20px; top:-15px">
                            <div class="input_msg_write">
                                <button class="msg_send_btn" type="button" style="background-color: Transparent;"> <img src="~/images/write_message.png" class="w3-left w3-circle w3-margin-right" style="width: 300px; position: relative;"></button>
                            </div>
                        </div>
                        <div class="srch_bar" style="position:relative; left:-100px;">
                            <div class="stylish-input-group">
                                <input type="text" class="search-bar" placeholder="Search">
                                <span class="input-group-addon">
                                    <button type="button"> <i class="fa fa-search" aria-hidden="true"></i> </button>
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="inbox_chat">
                        @{
                            // Sorted List By DateTime
                            var sortedMessages = Model.Where(
                            r => (r.UserName == User.Identity.Name || r.ReceiverName == User.Identity.Name)).ToList(); // Added by MS

                            sortedMessages.Sort((x, y) => DateTime.Compare(x.When, y.When));
                            sortedMessages.Reverse(); // We need to have list of messages the user has in the descending order for algorithm to work properly

                            List<List<ApplicationMessage>> messagesInGroupList = new List<List<ApplicationMessage>>();
                            String sender, receiver;

                            for (int i = 0; i < sortedMessages.Count; i++)
                            {
                                List<ApplicationMessage> tmpList = new List<ApplicationMessage>();
                                if (sortedMessages[i] != null)
                                {

                                    tmpList.Add(sortedMessages[i]);


                                    sender = sortedMessages[i].UserName;
                                    receiver = sortedMessages[i].ReceiverName;

                                    for (int j = i + 1; j < sortedMessages.Count; j++)
                                    {
                                        if (!tmpList.Contains(sortedMessages[j]))
                                        {
                                            try
                                            {
                                                if ((sortedMessages[j].UserName == sender && sortedMessages[j].ReceiverName == receiver) ||
                                                       (sortedMessages[j].UserName == receiver && sortedMessages[j].ReceiverName == sender))
                                                {
                                                    tmpList.Add(sortedMessages[j]);
                                                    sortedMessages[j] = null;
                                                }
                                            }
                                            catch (Exception e)
                                            {
                                                System.Diagnostics.Trace.WriteLine("MY ERRROR IS: " + e);
                                            }

                                        }
                                    }

                                    messagesInGroupList.Add(tmpList);
                                }
                                else
                                {
                                    continue;
                                }


                            }

                            List<ApplicationMessage> groupMessagesFinalGrouped = new List<ApplicationMessage>();
                            for (int i = 0; i < messagesInGroupList.Count; i++)
                            {
                                for (int j = 0; j < messagesInGroupList[i].Count; j++)
                                {
                                    groupMessagesFinalGrouped.Add(messagesInGroupList[i].First());
                                    break;
                                }
                            }

                        }

                        @{
                            foreach (var item in groupMessagesFinalGrouped)
                            {
                                <div class="chat_list active_chat">
                                    <div class="chat_people">
                                        <div class="chat_img"> <img src="https://ptetutorials.com/images/user-profile.png" alt="sunil"> </div>
                                        <div class="chat_ib">
                                            @{ 
                                                String mySender = String.Empty;
                                                if (item.UserName != User.Identity.Name)
                                                {
                                                    mySender = item.UserName;
                                                }
                                                else if (item.ReceiverName != User.Identity.Name)
                                                {
                                                    mySender = item.ReceiverName;
                                                }
                                            }
                                            <h5>@mySender<span class="chat_date" style="margin-top: 50px" >@item.When</span></h5>
                                            <p>
                                                @item.Text
                                            </p>
                                            &nbsp;
                                            <p>
                                                @Html.ActionLink("See chat", "ReloadOpenChat", "User", new { selectedUser = mySender }, null)
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            }
                        }



                    </div>
                </div>
                <div class="mesgs">
                    <div class="msg_history" id="chat">
                        @{

                            var myMessages = Model.Where(
                            r => (r.UserName == User.Identity.Name && r.ReceiverName == Context.Request.Query["selectedUser"])
                            || (r.UserName == Context.Request.Query["selectedUser"] && r.ReceiverName == User.Identity.Name)).ToList(); // Added by MS

                            myMessages.Sort((x, y) => DateTime.Compare(x.When, y.When));
                            myMessages.Reverse(); // We need to have list of messages the user has in the descending order for algorithm to work properly

                        }

                        @if (Model != null)
                        {
                            @foreach (var message in myMessages.OrderBy(m => m.When))
                            {
                                <!-- Which tabs are generated is regulated here -->
                                string containerClass, timePosition, textAlign, contcolor, offset;
                                if (userName == message.UserName)
                                {
                                    containerClass = "container darker";
                                    timePosition = "time-right text-light";
                                    textAlign = "text-right text-white";
                                    contcolor = "bg-primary";
                                    offset = "col-md-6 offset-md-6";
                                }
                                else
                                {
                                    containerClass = "container";
                                    timePosition = "time-left";
                                    textAlign = "text-left";
                                    contcolor = "bg-light";
                                    offset = "col-md-6 offset-md-1";
                                }


                                <!-- Message tabs are genetaed here -->

                                <div class="row">
                                    <div class="@offset">
                                        <div class="@containerClass @contcolor">


                                            <p class="sender @textAlign">@message.UserName</p>
                                            <p class="@textAlign">@message.Text</p>
                                            <span class="@timePosition">@message.When.ToString()</span>

                                        </div>
                                    </div>
                                </div>

                            }
                        }

                    </div>
                    <div class="type_msg">
                        <div class="input_msg_write">
                            <form asp-action="CreateMessage"
                                  data-ajax-begin="clearInputField"
                                  data-ajax-complete=""
                                  data-ajax-failure="alert('Fail')"
                                  data-ajax-success="sendMessage"
                                  data-ajax="true"
                                  data-ajax-method="POST">

                                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                                <div class="form-group">
                                    <input name="Text" class="form-control" style="margin-top: 20px" id="messageText" />
                                </div>
                                <div class="form-group">
                                    <input type="image"
                                           src="~/images/Message.png"
                                           alt="Submit"
                                           id="submitButton"
                                           style="width:60px; height:50px; margin-left: 550px; margin-top:-100px; border-color: #1861ac;"
                                           class="btn" />
                                </div>

                                <input type="hidden" value="@userName" name="username" />
                                <input type="hidden" name="selectedUser" value=@Context.Request.Query["selectedUser"] />

                            </form>

                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>


    @if (User.Identity.IsAuthenticated)
    {
        <script>
    const userName = "@ViewBag.CurrentUserName"
        </script>
    }

    @section scripts {
        <script src="~/signalr/signalr.min.js"></script>
        <script src="~/lib/jquery/dist/jquery-unobtrusive-ajax.min.js"></script>
        <script src="~/js/chat.js"></script>
        <script src="~/js/signrReqHandler.js"></script>
    }


</body>
</html>